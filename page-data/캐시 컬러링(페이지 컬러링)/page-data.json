{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/캐시 컬러링(페이지 컬러링)/","result":{"data":{"site":{"siteMetadata":{"title":"KMKMI","author":"Kangmo Han"}},"markdownRemark":{"id":"56f081c5-6c93-5c2e-852b-b34f08dc699a","html":"<h1>캐시 컬러링<strong>Cache coloring</strong>(=페이지 컬러링<strong>Page coloring</strong>)</h1>\n<p>출처 : <a href=\"https://en.wikipedia.org/wiki/Cache_coloring\">위키피디아</a></p>\n<p>프로세서에 의해 캐시된 총 페이지 수를 최대화하기 위해,<br>\nCPU 캐시에게 인접한 free page를 할당하려는 시도의 과정<br>\nOS의 low-level dynamic memory allocation code에 가상 메모리를 물리 메모리로 매핑할 때 자주 사용됨<br>\n한 프로그램에서 다음 것까지로의 페이지 할당에서의 차이는 프로그램 퍼모먼스의 큰 차이로 이어질 수 있음에 따라,<br>\n캐시 컬러링이 안되는 가상 메모리 서브시스템은 캐시 퍼포먼스 관련하여 덜 deteministic 함  </p>\n<p>물리적으로 인덱스된 CPU 캐시는 인접한 주소의 물리 메모리 블럭들이 다른 위치에 캐시되도록 디자인되어 있지만, 가상 메모리 경우는 아니다.<br>\n가상 메모리에서 인접했지만 물리 메모리에서 인접하지 않은 메모리 블럭들이 할당될 때, 그들은 잠재적으로 같은 위치에 캐시될 수 있다.<br>\n컬러링은 이웃 페이지들과 경쟁하지 않을 페이지를 선택하는 방법으로 위 문제를 해결하는 메모리 관리 소프트웨어에 적용되는 기법이다.<br>\n캐시 컬러링에서 물리 메모리 페이지들은 다른 \"colors\"의 페이지들이 CPU 캐시 메모리의 다른 위치에 캐시되도록 \"colored\"된다.<br>\n가상 메모리에 프로세스들을 위해 연속된 페이지를 할당할 때, 커널은 다른 \"colors\"의 페이지들을 모으고 그것들을 가상 메모리에 매핑한다.<br>\n이 방법으로, 연속된 페이지들은 가상 메모리에서 같은 캐시 라인에 캐시되기 위해 경쟁하지 않게 된다.  </p>","excerpt":"캐시 컬러링Cache coloring(=페이지 컬러링Page coloring) 출처 : 위키피디아 프로세서에 의해 캐시된 총 페이지 수를 최대화하기 위해, CPU 캐시에게 인접한 free page를 할당하려는 시도의 과정 OS의 low-level…","frontmatter":{"title":"캐시 컬러링(페이지 컬러링)","date":"2019-12-03","tags":["Cache"],"keywords":["KMKMI"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/캐시 컬러링(페이지 컬러링)/","previous":{"fields":{"slug":"/리눅스 커널 (3) - 프로세스 관리/"},"frontmatter":{"title":"리눅스 커널 (3) - 프로세스 관리","tags":["Kernel","Linux","Process"],"published":true}},"next":{"fields":{"slug":"/소프트웨어 공학 - 애자일 프로세스, 스크럼/"},"frontmatter":{"title":"소프트웨어 공학 - 애자일 프로세스, 스크럼","tags":["SW Engineering"],"published":true}}}}}
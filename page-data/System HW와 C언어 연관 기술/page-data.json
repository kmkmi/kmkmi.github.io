{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/System HW와 C언어 연관 기술/","result":{"data":{"site":{"siteMetadata":{"title":"KMKMI","author":"Kangmo Han"}},"markdownRemark":{"id":"e7e1c4d1-a09d-54cd-bcdd-f8a81353f077","html":"<ul>\n<li>\n<p>현재 대다수 RISC이다.</p>\n<ul>\n<li>x86이나 amd cpu들은 CISC 명령어들을 처리하지만 이들을 micro ops로 쪼개서 RISC 구조로 실행하기 때문에 RISC cpu</li>\n<li>컨트롤러가 가끔 CISC 사용</li>\n</ul>\n</li>\n<li>datapath 별 명령어가 적어서 Reduced Instruction Set Computer</li>\n<li>\n<p>x86 컴퓨터가 한 명령어 체계만 쓰고 있는 것이 아님</p>\n<ul>\n<li>sse, AVX 등도 함께 사용</li>\n<li>Multi-Datapath based RISC</li>\n<li>명령어 체계 별로 datapath 가짐</li>\n</ul>\n</li>\n<li>\n<p>I 버스, D 버스 쓰는 경우 하버드 아키텍처</p>\n<ul>\n<li>폰 노이만 아키텍처와 다르다!</li>\n</ul>\n</li>\n<li>\n<p>APIC(Advanced Programmable Interrupt Controller)</p>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/APIC\">https://ko.wikipedia.org/wiki/APIC</a></li>\n</ul>\n</li>\n<li>\n<p>DMA(Direct Memory Access)</p>\n<ul>\n<li>특정 하드웨어 하위 시스템이 CPU와 독립적으로 메인 시스템 메모리에 접근할 수 있게 해주는 컴퓨터 시스템의 기능</li>\n<li>DMA에서 LPC핀의 경우 서버랑 통신할때 사용</li>\n</ul>\n</li>\n<li>\n<p>Low Pin Count(LPC) :  하드웨어적으로 연결하는 핀</p>\n<ul>\n<li>cpu에 낮은 광대역 장치 연결하는 인터페이스</li>\n</ul>\n</li>\n<li>\n<p>Bare-metal : 가상화에서 가상 cpu 안의 값을 외부 장치가 바꾸는 기술</p>\n<ul>\n<li>소프트웨어 하드웨어 단 경계를 넘어 직접 접근하는 것</li>\n<li>register 직접 접근</li>\n<li>physical register도 접근 가능</li>\n<li>\n<p>가상화의 경우 관리자가 편해짐</p>\n<ul>\n<li>e.g. 사용자 cpu를 no operation으로 작동 못하게할 수 있음</li>\n</ul>\n</li>\n<li>프로세서에서 사용할 경우 장치 직접 제어가 가능해짐</li>\n</ul>\n</li>\n<li>\n<p>Controller는 IO를 위해 이미 Bare-metal이다.</p>\n<ul>\n<li>\n<p>컨트롤러도 레지스터 가짐</p>\n<ul>\n<li>장치가 제어 역할을 하면 레지스터 가짐</li>\n</ul>\n</li>\n<li>register 직접 접근 가능 여부가 cpu와의 차이</li>\n</ul>\n</li>\n<li>char형은 int 형에서 인코딩 테이블에 맞춰 치환해주는 형태</li>\n<li>\n<p>SR-IOV(Single Root I/O Virtualization)</p>\n<ul>\n<li>PF[Physical Function] :  물리적인 PCI 카드를 나타냄</li>\n<li>VF[Virtual Function] : 가상 PCI 카드를 생성해 줄 수 있는 기능</li>\n</ul>\n</li>\n<li>\n<p>정의 → #define : 심볼 테이블에 명시함</p>\n<ul>\n<li>자료형, 함수명, 변수명 등 대다수 C언어 문법 안에 존재하는 것을 대상으로 할 수 있음</li>\n<li>선언과는 별개이지만 별칭(여러개 가능)을 붙였다고 볼 수 있음</li>\n</ul>\n</li>\n<li>\n<p>gcc -E hello.c</p>\n<ul>\n<li>-E 옵션 : 전처리 과정 화면에 출력</li>\n</ul>\n</li>\n<li>\n<p>stdio.h</p>\n<ul>\n<li>시스템과 관련한 변수, 메모리 주소, 상수들을 선언</li>\n<li>메모리와 I/O 관계 정의</li>\n</ul>\n</li>\n<li>\n<p>primitive data format : 선언 내리면 할당되어 있음</p>\n<ul>\n<li>int</li>\n<li>float</li>\n<li>char</li>\n<li>*</li>\n</ul>\n</li>\n<li>C언어 C89에서는 선언, 할당, 대입을 한번에 할 수 없었지만(에러 발생) C99부터 사용 가능</li>\n<li>어셈블러(컴퓨터 자체가)는 메모리 주소만으로 자료형알 수 없음</li>\n<li>\n<p>printf, scanf : 특수한 함수</p>\n<ul>\n<li>va_args : 인자 개수가 가변적이고 제한이 없다.</li>\n<li>커널에서 한계가 있음</li>\n</ul>\n</li>\n<li>\n<p>C 컴파일러의 4 stage : 만들 수 있는 바이너리 종류 4가지</p>\n<ul>\n<li>1st : Raw image ← 이 단계부터 printf, scanf 사용 가능</li>\n<li>2nd : KERNEL API</li>\n<li>3rd : Library</li>\n<li>4th : execute file</li>\n</ul>\n</li>\n</ul>","excerpt":"현재 대다수 RISC이다. x86이나 amd cpu들은 CISC 명령어들을 처리하지만 이들을 micro ops로 쪼개서 RISC 구조로 실행하기 때문에 RISC cpu 컨트롤러가 가끔 CISC 사용 datapath 별 명령어가 적어서 Reduced…","frontmatter":{"title":"System HW와 C언어 연관 기술","date":"2020-07-06","tags":["C lang","System"],"keywords":["KMKMI"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/System HW와 C언어 연관 기술/","previous":{"fields":{"slug":"/해커의 관점/"},"frontmatter":{"title":"해커의 관점","tags":["정보보안","Hacking"],"published":true}},"next":{"fields":{"slug":"/OS를 구성하는 시스템/"},"frontmatter":{"title":"OS를 구성하는 시스템","tags":["OS","System"],"published":true}}}}}